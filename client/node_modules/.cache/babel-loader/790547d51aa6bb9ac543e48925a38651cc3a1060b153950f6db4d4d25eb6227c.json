{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { serveUrl } from '../../config';\nconst useChat = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: 'Hello my friend!',\n    createdAt: '2021-07-21 12:09:12',\n    user: {\n      id: 1\n    }\n  }, {\n    id: 2,\n    text: 'Hello!',\n    createdAt: '2021-07-21 14:09:12',\n    user: {\n      id: 2\n    }\n  }]);\n  const getHistoy = async () => {\n    const userId = localStorage.getItem('userId');\n    const history = await fetch(`${serveUrl}/msgHistory/${userId}`).then(res => res.json());\n    if (history.length > 0) {\n      setMessages(history.map(elem => ({\n        id: elem.id,\n        text: elem.text,\n        createdAt: elem.timestamp,\n        user: {\n          id: elem.user === 'true' ? 2 : 1\n        }\n      })));\n    }\n  };\n  const sendMessage = async message => {\n    const userId = localStorage.getItem('userId');\n    const timestamp = new Date().getTime();\n    await fetch(`${serveUrl}/msgSave/${message.text}/${userId}/${timestamp}/true`, {\n      method: 'POST'\n    });\n    getHistoy();\n  };\n  useEffect(() => {\n    const timer = setInterval(() => {\n      getHistoy();\n    }, 5000);\n    return () => clearInterval(timer);\n  });\n  return {\n    messages,\n    sendMessage\n  };\n};\n_s(useChat, \"CesPjZr7YvgN4i54Hxh5UaUh3BA=\");\nexport default useChat;","map":{"version":3,"names":["useState","useEffect","serveUrl","useChat","messages","setMessages","id","text","createdAt","user","getHistoy","userId","localStorage","getItem","history","fetch","then","res","json","length","map","elem","timestamp","sendMessage","message","Date","getTime","method","timer","setInterval","clearInterval"],"sources":["/Users/levanta1s/Desktop/Worker's Club/exchange_front/src/components/chat/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react'\r\nimport { Message } from 'react-simple-chat'\r\nimport { serveUrl } from '../../config'\r\nimport { useAppSelector } from '../../store/hooks'\r\n\r\nconst useChat = () => {\r\n    const [messages, setMessages] = useState<Message[]>([\r\n        {\r\n            id: 1,\r\n            text: 'Hello my friend!',\r\n            createdAt: '2021-07-21 12:09:12',\r\n            user: {\r\n                id: 1,\r\n            }\r\n        },\r\n        {\r\n            id: 2,\r\n            text: 'Hello!',\r\n            createdAt: '2021-07-21 14:09:12',\r\n            user: {\r\n                id: 2,\r\n            }\r\n        }\r\n    ])\r\n\r\n    const getHistoy = async () => {\r\n        const userId = localStorage.getItem('userId')\r\n\r\n        const history = await fetch(`${serveUrl}/msgHistory/${userId}`).then(res => res.json())\r\n\r\n        if (history.length > 0) {\r\n            setMessages(history.map((elem: any) => ({\r\n                id: elem.id,\r\n                text: elem.text,\r\n                createdAt: elem.timestamp,\r\n                user: {\r\n                    id: elem.user === 'true' ? 2 : 1\r\n                }\r\n            })))\r\n        }\r\n    }\r\n\r\n    const sendMessage = async (message: Message) => {\r\n        const userId = localStorage.getItem('userId')\r\n        const timestamp = new Date().getTime()\r\n        await fetch(`${serveUrl}/msgSave/${message.text}/${userId}/${timestamp}/true`, {\r\n            method: 'POST'\r\n        })\r\n\r\n        getHistoy()\r\n    }\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            getHistoy()\r\n        }, 5000)\r\n\r\n        return () => clearInterval(timer)\r\n    })\r\n\r\n    return {\r\n        messages,\r\n        sendMessage\r\n    }\r\n}\r\n\r\nexport default useChat"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAqB,OAAO;AAExD,SAASC,QAAQ,QAAQ,cAAc;AAGvC,MAAMC,OAAO,GAAG,MAAM;EAAA;EAClB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAY,CAChD;IACIM,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,kBAAkB;IACxBC,SAAS,EAAE,qBAAqB;IAChCC,IAAI,EAAE;MACFH,EAAE,EAAE;IACR;EACJ,CAAC,EACD;IACIA,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAE,qBAAqB;IAChCC,IAAI,EAAE;MACFH,EAAE,EAAE;IACR;EACJ,CAAC,CACJ,CAAC;EAEF,MAAMI,SAAS,GAAG,YAAY;IAC1B,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAE7C,MAAMC,OAAO,GAAG,MAAMC,KAAK,CAAE,GAAEb,QAAS,eAAcS,MAAO,EAAC,CAAC,CAACK,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC;IAEvF,IAAIJ,OAAO,CAACK,MAAM,GAAG,CAAC,EAAE;MACpBd,WAAW,CAACS,OAAO,CAACM,GAAG,CAAEC,IAAS,KAAM;QACpCf,EAAE,EAAEe,IAAI,CAACf,EAAE;QACXC,IAAI,EAAEc,IAAI,CAACd,IAAI;QACfC,SAAS,EAAEa,IAAI,CAACC,SAAS;QACzBb,IAAI,EAAE;UACFH,EAAE,EAAEe,IAAI,CAACZ,IAAI,KAAK,MAAM,GAAG,CAAC,GAAG;QACnC;MACJ,CAAC,CAAC,CAAC,CAAC;IACR;EACJ,CAAC;EAED,MAAMc,WAAW,GAAG,MAAOC,OAAgB,IAAK;IAC5C,MAAMb,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,MAAMS,SAAS,GAAG,IAAIG,IAAI,EAAE,CAACC,OAAO,EAAE;IACtC,MAAMX,KAAK,CAAE,GAAEb,QAAS,YAAWsB,OAAO,CAACjB,IAAK,IAAGI,MAAO,IAAGW,SAAU,OAAM,EAAE;MAC3EK,MAAM,EAAE;IACZ,CAAC,CAAC;IAEFjB,SAAS,EAAE;EACf,CAAC;EAEDT,SAAS,CAAC,MAAM;IACZ,MAAM2B,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC5BnB,SAAS,EAAE;IACf,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMoB,aAAa,CAACF,KAAK,CAAC;EACrC,CAAC,CAAC;EAEF,OAAO;IACHxB,QAAQ;IACRmB;EACJ,CAAC;AACL,CAAC;AAAA,GA3DKpB,OAAO;AA6Db,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}