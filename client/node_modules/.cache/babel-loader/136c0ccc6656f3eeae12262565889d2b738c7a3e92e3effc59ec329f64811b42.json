{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { serveUrl } from \"../../../../../../../config\";\nimport { useAppSelector } from \"../../../../../../../store/hooks\";\nconst config = {\n  fromCurrenycRange: {\n    from: 0.0013,\n    to: 11\n  },\n  toCurrenycRange: {\n    from: 0.0014,\n    to: 15\n  }\n};\nconst getFixedAmount = amount => {\n  if (amount.toFixed(7) === '0,0000000' || amount.toFixed(7) === '0.0000000') return '0';\n  return amount.toFixed(7);\n};\nconst useExchangeRate = () => {\n  _s();\n  const {\n    fromCurrency,\n    toCurrency\n  } = useAppSelector(state => state.exchange);\n  const [fromCurrencyAmount, setFromCurrencyAmount] = useState('0.01');\n  const [toCurrencyAmount, setToCurrencyAmount] = useState('');\n  const [isChangeInput, setIsChangeInput] = useState(true);\n  const [isChangeToCurrency, setIsChangeToCurrency] = useState(false);\n  const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false);\n  const getExchangeRate = async (toCurrencyAmount, fromCurrencyAmount, isChangeReceiveAmount) => {\n    if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName) return;\n    const isChange = isChangeReceiveAmount ? 'True' : 'false';\n    const newForm = await fetch(`${serveUrl}/calculator/${fromCurrency.shortName}/${toCurrency.shortName}/${fromCurrencyAmount || '0.001'}/${toCurrencyAmount || '0.001'}/${isChange}`, {\n      method: 'POST'\n    }).then(res => res.json());\n    if (isChangeReceiveAmount) {\n      setFromCurrencyAmount(getFixedAmount(newForm.amount));\n    } else {\n      setToCurrencyAmount(getFixedAmount(newForm.amount));\n    }\n    setIsChangeInput(false);\n  };\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false);\n  }, [fromCurrencyAmount, isChangeFromCurrency]);\n  useEffect(() => {\n    getExchangeRate(toCurrencyAmount, fromCurrencyAmount, true);\n  }, [toCurrencyAmount, isChangeToCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeFromCurrency(prev => !prev);\n  }, [fromCurrency]);\n  useEffect(() => {\n    setIsChangeInput(true);\n    setIsChangeToCurrency(prev => !prev);\n  }, [toCurrency]);\n  const changeFromAmount = amount => {\n    if (Number(amount) <= config.fromCurrenycRange.to && Number(amount) >= config.fromCurrenycRange.from) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.fromCurrenycRange.from}`);\n    }\n  };\n  const changeToAmount = amount => {\n    if (Number(amount) <= config.toCurrenycRange.to && Number(amount) >= config.toCurrenycRange.from) {\n      setFromCurrencyAmount(amount);\n    } else {\n      setFromCurrencyAmount(`${config.toCurrenycRange.from}`);\n    }\n  };\n  return {\n    exchangeRate: config,\n    fromCurrencyAmount,\n    toCurrencyAmount,\n    setFromCurrencyAmount: changeFromAmount,\n    setToCurrencyAmount: changeToAmount,\n    setIsChangeInput\n  };\n};\n_s(useExchangeRate, \"F7HjnKxtIQAc2UaV9fsH/DMbrV0=\", false, function () {\n  return [useAppSelector];\n});\nexport default useExchangeRate;","map":{"version":3,"names":["useEffect","useState","serveUrl","useAppSelector","config","fromCurrenycRange","from","to","toCurrenycRange","getFixedAmount","amount","toFixed","useExchangeRate","fromCurrency","toCurrency","state","exchange","fromCurrencyAmount","setFromCurrencyAmount","toCurrencyAmount","setToCurrencyAmount","isChangeInput","setIsChangeInput","isChangeToCurrency","setIsChangeToCurrency","isChangeFromCurrency","setIsChangeFromCurrency","getExchangeRate","isChangeReceiveAmount","shortName","isChange","newForm","fetch","method","then","res","json","prev","changeFromAmount","Number","changeToAmount","exchangeRate"],"sources":["C:/Users/user/Desktop/SimplyEx/client/src/screens/home/components/exchange/components/form/hooks/useExchangeRate.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { serveUrl } from \"../../../../../../../config\"\r\nimport { useAppSelector } from \"../../../../../../../store/hooks\"\r\n\r\nconst config = {\r\n    fromCurrenycRange: {\r\n        from: 0.0013,\r\n        to: 11\r\n    },\r\n    toCurrenycRange: {\r\n        from: 0.0014,\r\n        to: 15\r\n    },\r\n}\r\n\r\nconst getFixedAmount = (amount: number) => {\r\n    if (amount.toFixed(7) === '0,0000000' || amount.toFixed(7) === '0.0000000') return '0'\r\n    return amount.toFixed(7)\r\n}\r\n\r\nconst useExchangeRate = () => {\r\n    const {\r\n        fromCurrency,\r\n        toCurrency\r\n    } = useAppSelector(state => state.exchange)\r\n\r\n    const [fromCurrencyAmount, setFromCurrencyAmount] = useState('0.01')\r\n    const [toCurrencyAmount, setToCurrencyAmount] = useState('')\r\n    const [isChangeInput, setIsChangeInput] = useState(true)\r\n    const [isChangeToCurrency, setIsChangeToCurrency] = useState(false)\r\n    const [isChangeFromCurrency, setIsChangeFromCurrency] = useState(false)\r\n\r\n    const getExchangeRate = async (toCurrencyAmount: string, fromCurrencyAmount: string, isChangeReceiveAmount: boolean) => {\r\n        if (!isChangeInput || !toCurrency.shortName || !fromCurrency.shortName) return\r\n\r\n        const isChange = isChangeReceiveAmount ? 'True' : 'false'\r\n        const newForm = await fetch(`${serveUrl}/calculator/${fromCurrency.shortName}/${toCurrency.shortName}/${fromCurrencyAmount || '0.001'}/${toCurrencyAmount || '0.001'}/${isChange}`, {\r\n            method: 'POST',\r\n        }).then(res => res.json())\r\n\r\n        if (isChangeReceiveAmount) {\r\n            setFromCurrencyAmount(getFixedAmount(newForm.amount))\r\n        } else {\r\n            setToCurrencyAmount(getFixedAmount(newForm.amount))\r\n        }\r\n        setIsChangeInput(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        getExchangeRate(toCurrencyAmount, fromCurrencyAmount, false)\r\n    }, [fromCurrencyAmount, isChangeFromCurrency])\r\n\r\n    useEffect(() => {\r\n        getExchangeRate(toCurrencyAmount, fromCurrencyAmount, true)\r\n    }, [toCurrencyAmount, isChangeToCurrency])\r\n\r\n    useEffect(() => {\r\n        setIsChangeInput(true)\r\n        setIsChangeFromCurrency(prev => !prev)\r\n    }, [fromCurrency])\r\n\r\n    useEffect(() => {\r\n        setIsChangeInput(true)\r\n        setIsChangeToCurrency(prev => !prev)\r\n    }, [toCurrency])\r\n\r\n    const changeFromAmount = (amount: string) => {\r\n        if (Number(amount) <= config.fromCurrenycRange.to && Number(amount) >= config.fromCurrenycRange.from) {\r\n            setFromCurrencyAmount(amount)\r\n        } else {\r\n            setFromCurrencyAmount(`${config.fromCurrenycRange.from}`)\r\n        }\r\n    }\r\n\r\n    const changeToAmount = (amount: string) => {\r\n        if (Number(amount) <= config.toCurrenycRange.to && Number(amount) >= config.toCurrenycRange.from) {\r\n            setFromCurrencyAmount(amount)\r\n        } else {\r\n            setFromCurrencyAmount(`${config.toCurrenycRange.from}`)\r\n        }\r\n    }\r\n\r\n    return {\r\n        exchangeRate: config,\r\n        fromCurrencyAmount,\r\n        toCurrencyAmount,\r\n        setFromCurrencyAmount: changeFromAmount,\r\n        setToCurrencyAmount: changeToAmount,\r\n        setIsChangeInput\r\n    }\r\n}\r\n\r\nexport default useExchangeRate"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}