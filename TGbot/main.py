#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import random
import sys
import asyncio
import logging
import time
from aiogram.types import CallbackQuery,FSInputFile,InlineKeyboardButton,InlineQuery, InputTextMessageContent, InlineQueryResultArticle,InputMediaPhoto
from aiogram import Bot, Dispatcher, types,Router
from aiogram.dispatcher.fsm.context import FSMContext
from keyboards.default import keyboards as default 
from keyboards.inline import keyboards as inline 
from aiogram.dispatcher.fsm.storage.memory import MemoryStorage
import data.config as config
from utils.db_api import requests as db_api
from states.user import states
from PIL import Image, ImageDraw,ImageFont
from datetime import datetime


db_api.createDb()

form_router = Router()
storage = MemoryStorage()
dp = Dispatcher(storage=storage)



async def main(bot: Bot) -> None:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )
    dp.include_router(form_router)
    bot = Bot(f'{config.BotToken}', parse_mode="HTML")
    await bot.delete_webhook(drop_pending_updates=True)
    try:
        await dp.start_polling(bot,drop_pending_updates=True)
    except:
        logging.info("Polling task Canceled")



@form_router.message(state=states.changeReq.wallet)
async def rf(message: types.Message,bot: Bot, state: FSMContext):
    data = await state.get_data()
    coin = data['value']
    wallet = message.text
    db_api.changeStatus(coin,wallet)
    await bot.send_message(message.chat.id,'–†–µ–∫–≤–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
    await state.clear()


@form_router.message(commands={"start"})
async def start_cmd(message: types.Message,bot: Bot,state: FSMContext):
    usr = db_api.checkUser(message.from_user.id)
    if not usr:
        pas = ''
        dt = datetime.now()
        ts = datetime.timestamp(dt)
        for x in range(8): 
            pas = pas + random.choice(list('1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ'))
        db_api.registerUser(message.from_user.id,f'@{message.from_user.username}',pas,ts)
    await bot.send_message(message.chat.id,text = f"""<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}</b>""",reply_markup=default.main_keyboard(message.from_user.id))



@form_router.message(content_types = ['text'])
async def get_text(message: types.Message,bot: Bot) -> None:
    if message.text == 'üíé –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        img = Image.open("example.jpg")
        d1 = ImageDraw.Draw(img)
        fnt = ImageFont.truetype("Roboto-Bold.ttf", 50)
        fnt1 = ImageFont.truetype("Roboto-Bold.ttf", 40)
        fnt2 = ImageFont.truetype("Roboto-Regular.ttf", 18)
        fnt3 = ImageFont.truetype("Roboto-Regular.ttf", 21)
        fnt4= ImageFont.truetype("Roboto-Bold.ttf", 30)
        fnt5= ImageFont.truetype("Roboto-Bold.ttf", 30)
        count = db_api.getProfitsCount(message.from_user.id)
        amount = db_api.getProfitsAmount(message.from_user.id)
        dt = datetime.now()
        ts = datetime.timestamp(dt)
        days = int((ts - db_api.getRegistration(message.from_user.id))/86400)
        d1.text(
                    (102,50),
                    f"–í–æ—Ä–∫–µ—Ä Worker's Club",font=fnt,
                    fill=('#000000')
                    )
        d1.text(
                    (102,110),
                    f'@your_exiss',font=fnt1,
                    fill=('#000000')
                    )
        d1.text(
                    (102,170),
                    f'{days} –¥–Ω–µ–π –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ',font=fnt2,
                    fill=('#000000')
                    )
        d1.text(
                    (102,260),
                    f'{count} –ø—Ä–æ—Ñ–∏—Ç–æ–≤',font=fnt3,
                    fill=('#000000')
                    )
        d1.text(
                    (102,290),
                    f'–ù–∞ —Å—É–º–º—É {amount} $',font=fnt4,
                    fill=('#000000')
                    )
        d1.text(
                    (102,390),
                    f'@ExchangeWorkersClub_bot',font=fnt5,
                    fill=('#000000')
                    )
        img.save('abc.jpeg')
        code = db_api.getRefCode(message.from_user.id)
        await bot.send_photo(message.chat.id,caption = f"""<b>üíé –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å [{message.from_user.id}]</b>

<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{code}</code>

<b>–û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç:</b> <code>{amount}$</code>
<b>–ö–æ–ª-–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤:</b> <code>{count}</code>

<b>–í –∫–æ–º–∞–Ω–¥–µ:</b> {days} –¥–Ω–µ–π""",photo = FSInputFile('abc.jpeg'))
    elif message.text == 'üîó –ú–æ–∏ –¥–æ–º–µ–Ω—ã':
        await bot.send_message(message.chat.id,text = '<b>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>')
    elif message.text == 'üìñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å?':
        code = db_api.getCode(message.from_user.id)
        await bot.send_message(message.chat.id,text = f"""<b>üìñ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ</b>

<b>–°—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞—à–∏ –æ–±–º–µ–Ω–Ω–∏–∫–∏:</b>
‚Äî https://simplyex.pro

<b>–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:</b> <code>{code}</code>

<b>–¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>
‚Äî https://simplyex.pro?ref={code}


<b>–°–≤—è–∑–∫–∏ –¥–ª—è –º–∞–º–æ–Ω—Ç–æ–≤:</b>
<b>XMR/USDT</b> - https://telegra.ph/Novaya-arbitrazhnaya-svyazka-06-19
<b>LTC/USDT</b> - https://telegra.ph/Novaya-arbitrazhnaya-svyazka-06-19-2
<b>TRX/USDT</b> - https://telegra.ph/Novaya-arbitrazhnaya-svyazka-06-19-3

<i>‚ö†Ô∏è –ú–∞–º–æ–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ</i>""",reply_markup=inline.faqButtons(),disable_web_page_preview=True)
    elif message.text == 'üë©üèª‚Äçüíª –û –ø—Ä–æ–µ–∫—Ç–µ':
        await bot.send_message(message.chat.id,text = """üë©üèª‚Äçüíª –û –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ

–ú—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å 10.12.2022
–£ –Ω–∞—Å 243 –ø—Ä–æ—Ñ–∏—Ç–∞ –Ω–∞ —Å—É–º–º—É 94031 $
–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–∞: 387 $

üí∞ –í—ã–ø–ª–∞—Ç—ã –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:
‚Äî –ú–∏–Ω–∏–º–∞–ª–∫–∞ - 50$
‚Äî –î–æ 100 $ - 50%
‚Äî –û—Ç 100 $ - 70%

- 10% –∑–∞ –∫–∞–∂–¥—ã–π X –æ—Ç —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏
+ 5% –∑–∞ –æ—Ç–∑—ã–≤ –≤ –Ω–∞—à–µ–π —Ç–µ–º–µ:
https://zelenka.guru/threads/4678753/

üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
–¢—Å / –∫–æ–¥–µ—Ä: @alpina_ts
–¢—Å: @alcovete_r

‚ö†Ô∏è –í–æ—Ä–∫ –ø–æ —É–∫—Ä –∑–∞–ø—Ä–µ—â–µ–Ω
üí∏ –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –Ω–∞ @CryptoBot

‚ö†Ô∏è –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –ø–æ—Å–ª–µ 2 –ø—Ä–æ—Ñ–∏—Ç–æ–≤""")
    elif message.text == '‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é':
        await bot.send_message(message.chat.id,text= f'<b>Hello</b>',reply_markup=inline.apanel())
    else:
        pass



@form_router.callback_query(lambda c: c.data,)
async def ans(call: CallbackQuery,bot: Bot,state: FSMContext,) -> None:
    if 'uans' in call.data:
        id = call.data.split('_')[1]
        await state.update_data(userId = id)
        await bot.send_message(call.message.chat.id,text = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç')
        await state.set_state(states.Answer.text)
    elif call.data == 'changereq':
        await bot.send_message(call.message.chat.id,text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–∏–Ω:</b>',reply_markup=inline.change_coins())
    elif 'ch_' in call.data:
        await state.update_data(value = call.data.split('_')[1])
        await bot.send_message(call.message.chat.id,'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∫–≤–∏–∑–∏—Ç')
        await state.set_state(states.changeReq.wallet)




if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main(bot = Bot))